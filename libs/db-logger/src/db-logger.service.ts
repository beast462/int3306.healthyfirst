import { hostname } from 'os';
import { Repository } from 'typeorm';

import { LogEntity, LogTypes } from '@/common/entities/log.entity';
import { Fingerprint } from '@/common/helpers/fingerprint';
import { Injectable, LoggerService, Scope } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectRepository } from '@nestjs/typeorm';
import { ConfigKeys } from 'apps/healthy-first/src/base/config.module';

type MiscInfo = {
  stack: string;
  context: string;
};

const PROJECT_ROOT = process.cwd();

@Injectable({
  scope: Scope.TRANSIENT,
})
export class DbLoggerService implements LoggerService {
  private static readonly deviceName: string = hostname();
  private readonly allowedLogTypes: Set<LogTypes>;

  public constructor(
    @InjectRepository(LogEntity)
    private readonly logRepository: Repository<LogEntity>,
    configService: ConfigService,
  ) {
    this.allowedLogTypes = configService.get<Set<LogTypes>>(
      ConfigKeys.DB_LOG_TYPES,
    );
  }

  private generateStack(): string {
    const stack = new Error().stack;

    const stackLines = stack.split('\n');
    // Rename error type to AutoGeneratedStackTrace
    stackLines[0] = 'AutoGeneratedStackTrace:';
    // Remove all stack trace of DbLoggerService
    // Keep the stack trace of the caller
    stackLines.splice(1, 4);

    return stackLines.join('\n');
  }

  private getMisc(stack?: string, context?: string): MiscInfo {
    return {
      context: context ?? stack ?? 'DbLogger',
      stack:
        typeof context === 'string'
          ? stack ?? this.generateStack()
          : this.generateStack(),
    };
  }

  private async generalLog(
    message: string,
    detail: string,
    type: LogTypes,
    _stack?: string,
    _context?: string,
  ): Promise<void> {
    if (!this.allowedLogTypes.has(type)) return;

    const { stack, context } = this.getMisc(_stack, _context);

    const strippedStack = stack
      .split('\n')
      .map((line) =>
        line
          .replace(__dirname, '')
          .replace(PROJECT_ROOT, '')
          .replace(/\\/g, '/'),
      )
      .join('\n');

    const log = this.logRepository.create({
      detail,
      message,
      scope: context,
      stack: strippedStack,
      type,
      source: DbLoggerService.deviceName,
      fingerprint: await Fingerprint.getFingerprint({ convert: 'hex' }),
    });

    this.logRepository.insert(log);
  }

  public log(message: string, detail: string, context: string): void;
  public log(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public log(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.LOG, _stack, _context);
  }

  public warn(message: string, detail: string, context: string): void;
  public warn(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public warn(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.WARNING, _stack, _context);
  }

  public error(message: string, detail: string, context: string): void;
  public error(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public error(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.ERROR, _stack, _context);
  }

  public fatal(message: string, detail: string, context: string): void;
  public fatal(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public fatal(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.FATAL, _stack, _context);
  }

  public debug(message: string, detail: string, context: string): void;
  public debug(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public debug(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.DEBUG, _stack, _context);
  }

  public verbose(message: string, detail: string, context: string): void;
  public verbose(
    message: string,
    detail: string,
    stack: string,
    context: string,
  ): void;

  public verbose(
    message: string,
    detail: string,
    _stack?: string,
    _context?: string,
  ): void {
    this.generalLog(message, detail, LogTypes.VERBOSE, _stack, _context);
  }
}
